;   Top module for the USBSER project.  See the USBSER.INS.ASPIC include
;   file for a description of the project.
;
/include "usbser.ins.aspic"

         extern  regs        ;force general registers to be defined

         extern  init        ;system startup after individual modules initialized

/show "  Instruction clock = " [eng freq_inst 4] "Hz"

;*******************************************************************************
;
;   Set static processor configuration bits.
;
.config  code_pack cfg_adr

         db      b'11100110' ;CONFIG1L
                 ; XX------  unused
                 ; --X-----  div select for low speed USB, unused
                 ; ---00---  divide clock by 1
                 ; -----X--  unused
                 ; ------1-  PLL clock multiplier enabled
                 ; -------0  PLL multiplies by 4, not 3

         db      b'00110010' ;CONFIG1H
                 ; 0-------  oscillator switchover mode off
                 ; -0------  failsafe clock monitoring off
                 ; --1-----  primary clock always on
                 ; ---X----  unused
                 ; ----0010  HS crystal oscillator mode

         db      b'11100110' ;CONFIG2L
                 ; X-------  unused
                 ; -1------  low-power brownout reset disabled
                 ; --X-----  unused
                 ; ---00---  select brownout reset level of 2.85 V
                 ; -----11-  brownout reset on, not FW controlled
                 ; -------0  powerup timer on

         db      b'11111100' ;CONFIG2H
                 ; XX------  unused
                 ; --1111--  maximum WDT postscaler, 32768
                 ; ------00  WDT off

         db      b'11111111' ;CONFIG3L, unused

         db      b'11111111' ;CONFIG3H
                 ; 1-------  MCLR/RA3 is MCLR
                 ; -X------  SDO output select, unused
                 ; --X-----  unused
                 ; ---X----  T3CKI input select, unused
                 ; ----XX--  unused
                 ; ------0-  RB0-RB4 reset to digital, not analog
                 ; -------1  CCP2 on RC1, not RB3

         db      b'10011011' ;CONFIG4L
                 ; 1-------  disable background debugger
                 ; -0------  enhanced instruction set off
                 ; --0-----  ICD function on RB6/RB7
                 ; ---XX---  unused
                 ; -----0--  low voltage programming off
                 ; ------X-  unused
                 ; -------1  stack overflow/underflow causes reset

         db      b'11111111' ;CONFIG4H, unused

         db      b'11111111' ;CONFIG5L
                 ; XXXX----  unused
                 ; ----1111  code protection off

         db      b'11111111' ;CONFIG5H
                 ; 1-------  EEPROM code protection off
                 ; -1------  boot block code protection off
                 ; --XXXXXX  unused

         db      b'11111111' ;CONFIG6L
                 ; XXXX----  unused
                 ; ----1111  write protection off

         db      b'11011111' ;CONFIG6H
                 ; 1-------  EEPROM write protection off
                 ; -1------  boot block write protection off
                 ; --0-----  config bits write protection on
                 ; ---XXXXX  unused

         db      b'11111111' ;CONFIG7L
                 ; XXXX----  unused
                 ; ----1111  table read protection off

         db      b'11111111' ;CONFIG7H
                 ; X-------  unused
                 ; -1------  boot block table read protection off
                 ; --XXXXXX  unused

;*******************************************************************************
;
;   Global state.
;
         defram  gbankadr
;
;   Declare global flag bytes GFL0 - GFLn.  The assembly constant
;   NFLAGB is set to the number of these flag bytes by the /FLAG
;   preprocessor directives in USBSER.INS.ASPIC.
;
         flags_define        ;define the variables for the global flag bits

;*******************************************************************************
;
;   Executable code.
;
;   Reset vector.
;
.reset   code    0
         clrf    intcon      ;disable all interrupts
         gjump   relstart    ;jump to relocatable startup code
;
;   Relocatable code.
;
;   This code only initializes the individual modules.  The remaining
;   system initialization is done in the USBSER_INIT module, which jumps
;   to MAIN when done.
;
.strt    code
relstart unbank
;
;   Init the interrupt system to completely off and default configuration.
;
  ifdef intcon2
         dbankif intcon2
         movlw   b'10000000'
                 ; 1-------  disable port B passive pullups
                 ; -0000000  init interrupts to disabled
         movwf   intcon2     ;init interrupts off to extent possible
    endif
  ifdef intcon3
         dbankif intcon3
         clrf    intcon3
    endif
         ;
         ;   Make sure all interrupts are individually disabled.
         ;
  ifdef pie1
         dbankif pie1
         clrf    pie1
    endif
  ifdef pie2
         dbankif pie2
         clrf    pie2
    endif
  ifdef pie3
         dbankif pie3
         clrf    pie3
    endif
         ;
         ;   Clear any existing interrupt conditions.
         ;
  ifdef pir1
         dbankif pir1
         clrf    pir1
    endif
  ifdef pir2
         dbankif pir2
         clrf    pir2
    endif
  ifdef pir3
         dbankif pir3
         clrf    pir3
    endif
         ;
         ;   Init all interrupt priorities to the lowest priority.
         ;
  ifdef ipr1
         dbankif ipr1
         clrf    ipr1
    endif
  ifdef ipr2
         dbankif ipr2
         clrf    ipr2
    endif
  ifdef ipr3
         dbankif ipr3
         clrf    ipr3
    endif

  ifdef rcon
         dbankif rcon
         bcf     rcon, ipen
    endif
;
;   Initialize the global flag bits that are declared with /FLAG
;   directives in the main include file.
;
         flags_clear         ;initialize all global flag bits to 0
;
;   Initialize the separate modules.
;
         gcallnr stack_init  ;init the software data stack

         gcallnr port_init   ;init I/O ports
         gcallnr task_init   ;init multi-tasking manager
         gcallnr uart_init   ;init UART
         gcallnr prom_init   ;init non-volatile memory handler
         gcallnr name_init   ;init unit unique name manager
         gcallnr usb_init    ;init USB driver
         gcallnr supp_init   ;init power supply controller

         gcallnr intr_init   ;init interrupt management and enable interrupts
;
;   All the individual modules have been initialized.  Now start up the
;   overall system.
;
         gjump   init        ;go to system initialization module

         end
